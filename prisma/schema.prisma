generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  reportDms DirectMessageReport[]
  reporterProfile ProfileReport[] @relation("ReporterProfile")
  reportedProfile ProfileReport[] @relation("ReportedProfile")

  servers Server[]
  members Member[]
  channels Channel[]
  
  conversationsInitiated Conversation[] @relation("ProfileOne")
  conversationsReceived Conversation[] @relation("ProfileTwo")
  
  friendshipInitiated Friends[] @relation("FriendOne")
  friendshipReceived Friends[] @relation("FriendTwo")

  directMessages DirectMessage[]
  serverReports ServerReport[]
  reports MessageReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  serverReports ServerReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  status Boolean @default(true)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  reports MessageReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  profileOneId String
  profileOne Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String
  profileTwo Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([profileTwoId])

  @@unique([profileOneId, profileTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
  reports DirectMessageReport[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([conversationId])
}

model MessageReport {
  id String @id @default(uuid())
  reason String
  status String
  
  messageId String
  message Message @relation(fields: [messageId], references: [id])

  reporterId String
  reporter Profile @relation(fields: [reporterId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([messageId])
  @@index([reporterId])
}

model DirectMessageReport {
  id String @id @default(uuid())
  reason String
  status String
  
  directMessageId String
  directMessage DirectMessage @relation(fields: [directMessageId], references: [id])

  reporterId String
  reporter Profile @relation(fields: [reporterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([directMessageId])
  @@index([reporterId])
}

model ProfileReport {
  id String @id @default(uuid())
  reason String
  status String
  
  profileId String
  profile Profile @relation("ReportedProfile", fields: [profileId], references: [id])

  reporterId String
  reporter Profile @relation("ReporterProfile", fields: [reporterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([profileId])
  @@index([reporterId])
}

model ServerReport {
  id String @id @default(uuid())
  reason String
  status String
  
  serverId String
  server Server @relation(fields: [serverId], references: [id])

  reporterId String
  reporter Profile @relation(fields: [reporterId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([serverId])
  @@index([reporterId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DENIED
  BLOCKED
}

model Friends {
  id String @id @default(uuid())
  status FriendshipStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  friendOneId String
  friendOne Profile @relation("FriendOne", fields: [friendOneId], references: [id], onDelete: Cascade)

  friendTwoId String
  friendTwo Profile @relation("FriendTwo", fields: [friendTwoId], references: [id], onDelete: Cascade)

  senderId String

  @@index([friendTwoId])

  @@unique([friendOneId, friendTwoId])
}